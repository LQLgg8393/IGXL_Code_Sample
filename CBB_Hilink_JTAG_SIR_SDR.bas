Attribute VB_Name = "CBB_Hilink_JTAG_SIR_SDR"
Option Explicit

Private i As Long, Site As Variant


Public Function JTAG_SIR(Shift_in As String) As Long
' This function supports shifting IR transactions. Any Fixed length of bits supported,
' length of bits is device dependent, a certain device will require a certain fixed length of bits
' This function is generated by CBB_Code_Gen_Tool_for_H16_H30, contact GSO Shanghai Team for more details
' Public function meant to be called in Hilink CBB, amy also support other JTAG-compatible CBB
' ByVal <Shift_in> As String:       the shift in HEX data in String format
' Const <IR_TABs> As Long:          Specify how many bytes to be shifted in this transaction
' Return <JTAG_SIR>:                -1 if success; Other number if error occurs

    On Error GoTo Error_JTAG_SIR

    Const FrameName As String = "SIR"
    Const IR_TABs As Long = 8

    Dim tmpSin As String
    tmpSin = Shift_in

    With TheHdw.Protocol.Ports("JTAG_Pins")
        With .NWire.Frames(FrameName)
            For i = 0 To (IR_TABs - 1) \ 32
                .Fields("IR_Sin_L" + CStr(i)).Value = HexExtractBytes(tmpSin, 4)
            Next i
            Call .Execute
        End With
        .IdleWait
    End With

    If glb_DebugLog_ON Then TheExec.Datalog.WriteComment "JTAG_SIR(" + Chr(34) + Shift_in + Chr(34) + ")"

    JTAG_SIR = -1
    
    Exit Function

Error_JTAG_SIR:
    JTAG_SIR = Err.Number
''stop
    TheExec.Datalog.WriteComment "Error in 'JTAG_SIR' "
    Resume Next
End Function
Public Function JTAG_SDR(Shift_in As String, Shift_out As String, bits As Long) As Long
' This function supports shifting DR transactions, variable length of bits supported
' This function is generated by CBB_Code_Gen_Tool_for_H16_H30, contact GSO Shanghai Team for more details
' Public function meant to be called in Hilink CBB, amy also support other JTAG-compatible CBB
' ByVal <Shift_in> As String:       the shift in HEX data in string format
' ByVal <Shift_out> As String:      the expected shift out HEX data in string format
' ByVal <Bits> As Long:             Specify how many bytes to be shifted in this transaction
' Return <JTAG_SDR>:                -1 if success; Other number if error occurs

On Error GoTo Error_JTAG_SDR

Dim FrameName As String
Dim MaskVal As Long

Select Case bits
    Case 1
        FrameName = "SDR_1b"
    Case 2
        FrameName = "SDR_2b"
    Case 3
        FrameName = "SDR_3b"
    Case 6
        FrameName = "SDR_6b"
    Case 8
        FrameName = "SDR_8b"
    Case 12
        FrameName = "SDR_12b"
    Case 13
        FrameName = "SDR_13b"
    Case 15
        FrameName = "SDR_15b"
    Case 16
        FrameName = "SDR_16b"
    Case 17
        FrameName = "SDR_17b"
    Case 19
        FrameName = "SDR_19b"
    Case 20
        FrameName = "SDR_20b"
    Case 23
        FrameName = "SDR_23b"
    Case 28
        FrameName = "SDR_28b"
    Case 32
        FrameName = "SDR_32b"
    Case Else
        JTAG_SDR = JTAG_SDR_LONG(Shift_in, Shift_out, bits)
        GoTo JTAG_LOG_DR
End Select

With TheHdw.Protocol.Ports("JTAG_Pins")
    .NWire.MaxReadUntilCount = 4
    With .NWire.Frames(FrameName)
        .Fields("DR_Sin").Value = CLng("&H" + Shift_in)
        If Shift_out = "" Then
        
            Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK", False)
        Else
            .Fields("DR_Sout").Value = CLng("&H" + Shift_out)
            Call .Execute(tlNWireExecutionType_UntilMatchCaptureAll)
        End If

    End With
    .IdleWait
    
    JTAG_SDR = -1
    For Each Site In TheExec.Sites
        JTAG_SDR = JTAG_SDR And .Passed
    Next Site
End With

JTAG_LOG_DR:
If glb_DebugLog_ON Then TheExec.Datalog.WriteComment "JTAG_SDR(" + Chr(34) + Shift_in + Chr(34) + ", " + Chr(34) + Shift_out + Chr(34) + ", " + CStr(bits) + ")"

Exit Function
    
Error_JTAG_SDR:
    JTAG_SDR = Err.Number
    
    TheExec.Datalog.WriteComment "Error in 'JTAG_SDR' "
    Resume Next
End Function
                
Private Function JTAG_SDR_LONG(ByVal Shift_in As String, ByVal Shift_out As String, ByVal bits As Long) As Long
' This function supports shifting long DR transactions
' This function is generated by CBB_Code_Gen_Tool_for_H16_H30, contact GSO Shanghai Team for more details
' private function only meant to be called by function <JTAG_SDR>
' ByVal <Shift_in> As String:       the shift in HEX data in string format
' ByVal <Shift_out> As String:      the expected shift out HEX data in string format
' ByVal <Bits> As Long:             Specify how many bytes to be shifted in this transaction
' Return <JTAG_SDR_LONG>:           -1 if success; Other number if error occurs
' 2014/09/30; ver.01
         
On Error GoTo Error_JTAG_SDR_LONG
                   
Dim tmpSin As String, tmpSout As String
tmpSin = Shift_in: tmpSout = Shift_out
                   
With TheHdw.Protocol.Ports("JTAG_Pins")
                   
    Dim FrameName As String
    FrameName = "DR_Header"
    While bits > 32
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            .Fields("TMS").Value = 0
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
                Call .Execute(tlNWireExecutionType_Default)
            End If
                                                                                             
        End With
        .IdleWait
        bits = bits - 32
        FrameName = "DR_Body"
    Wend
    If bits < 32 Then
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            If bits = 31 Then
                .Fields("TMS").Value = &HC0000000
            Else
                .Fields("TMS").Value = 3 * 2 ^ (bits - 1)
            End If
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
                Call .Execute(tlNWireExecutionType_Default)
            End If
        End With
        .IdleWait
    Else
        FrameName = "DR_Tail"
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
                Call .Execute(tlNWireExecutionType_Default)
            End If
        End With
        .IdleWait
    End If
                   
End With
                   
JTAG_SDR_LONG = -1
Exit Function
                   
Error_JTAG_SDR_LONG:
    JTAG_SDR_LONG = Err.Number
    '    Stop
    TheExec.Flow.TestLimit -1, 0, 0
    TheExec.Datalog.WriteComment "Error in 'JTAG_SDR_Long' "
                   
End Function

Private Function HexExtractBytes(ByRef InOutStr As String, ByVal NumBytes As Long) As Long
' This function can extract the lower bytes from a string in HEX format, up to 4 bytes(32bits)
' and modify the original HEX string to only contain the remaining high digits.
' This function is generated by CBB_Code_Gen_Tool_for_H16_H30, contact GSO Shanghai Team for more details
' ByRef <InOutStr> As String:   the input and output of the HEX string
' ByVal <NumBytes> As Long:     Specify how many bytes you want to extract
' Return <HexExtractBytes>:     the lower bytes in Long format, not exceeding 32 bits
' 2015/09/30; ver.01
    On Error GoTo errHandler
                   
    InOutStr = Trim(InOutStr)
    If NumBytes > 4 Then MsgBox "NumBytes cannot exceed 4! Program will proceed with NumBytes = 4": Stop: NumBytes = 4
    If NumBytes < 1 Then MsgBox "NumBytes cannot be 0! Stop Program and correct the mistake.": Stop: Exit Function
    If Len(InOutStr) > NumBytes * 2 Then
        HexExtractBytes = CLng("&H" + Right(InOutStr, NumBytes * 2))
        InOutStr = Left(InOutStr, Len(InOutStr) - NumBytes * 2)
    Else
        HexExtractBytes = CLng("&H" + InOutStr)
        InOutStr = ""
    End If

    Exit Function
errHandler:
    Call TheExec.ErrorLogMessage("Test " & TL_C_ERRORSTR & ", Instance: " & TheExec.DataManager.InstanceName)
    If AbortTest Then Exit Function Else Resume Next
End Function

Public Function Load_PA_File(Optional Reload As Boolean = False) As Long
    On Error GoTo errHandler
    ' This function is routine, Do NOT modify this function, it will be called in the OnProgramLoaded() by the CBB automatically
    ' Return <Load_PA_File>:                 Nothing, upon completion please check the output window for execution result

    Dim HiLink_PA_File As String
    HiLink_PA_File = ".\SRC\PA_File\JTAG_H20USR_Five.PA"
    If Reload And TheHdw.Protocol.Families("nWire").Types.Contains("JTAG_Port") Then TheHdw.Protocol.Families("nWire").Types.Remove "JTAG_Port"
    Call TheHdw.Protocol.Families("nWire").Types.Add(HiLink_PA_File, "JTAG_Port")
    If TheHdw.Protocol.Families("nWire").Types.Contains("JTAG_Port") Then TheExec.AddOutput "PA_File <" + HiLink_PA_File + "> Loaded Successful!"

    Call H20USR_PAM_Initialize

    Exit Function
errHandler:
    HandleExecIPError "Load_PA_File"

End Function

Public Function Load_I2C_File(Optional Reload As Boolean = False) As Long
    On Error GoTo errHandler
    ' This function is routine, Do NOT modify this function, it will be called in the OnProgramLoaded() by the CBB automatically
    ' Return <Load_PA_File>:                 Nothing, upon completion please check the output window for execution result

    Dim HiLink_I2C_File As String
    HiLink_I2C_File = ".\SRC\PA_File\I2C_5345A_H20USR_relax_4cycle.PA"
    If Reload And TheHdw.Protocol.Families("nWire").Types.Contains("I2C_Port") Then
        TheHdw.Protocol.Families("nWire").Types.Remove "I2C_Port"
    End If
    Call TheHdw.Protocol.Families("nWire").Types.Add(HiLink_I2C_File, "I2C_Port")
    If TheHdw.Protocol.Families("nWire").Types.Contains("I2C_Port") Then TheExec.AddOutput "PA_File <" + HiLink_I2C_File + "> Loaded Successful!"
    
    glb_current_page_addr = 0


    Exit Function
errHandler:
    HandleExecIPError "Load_I2C_File"

End Function


Public Function Load_PA_Module(Optional Reload As Boolean = False) As Long
' This function is routine, do NOT modify this function, it will be called in the OnProgramValidated() by the CBB automatically
' Return <Load_PA_Module>:                 nothing, upon successful you will see the current HiLink CBB version info in the output window

    On Error GoTo errHandler

    TheHdw.Protocol.Ports("JTAG_Pins").Enabled = True
    TheHdw.Protocol.Ports("I2C_Pins").Enabled = True
    
    Call Load_PA_Masks

    If Reload Then TheHdw.Protocol.Ports("JTAG_Pins").ModuleFiles.UnloadAll
    If Reload Then TheHdw.Protocol.Ports("I2C_Pins").ModuleFiles.UnloadAll
    

    If Not TheHdw.Protocol.Ports("JTAG_Pins").ModuleFiles.Contains("VBT_H20USR_PAM_FW_Loader") Then
        TheHdw.Protocol.Ports("JTAG_Pins").ModuleFiles.Load "VBT_H20USR_PAM_FW_Loader"
    End If
    
    If Not TheHdw.Protocol.Ports("I2C_Pins").ModuleFiles.Contains("VBT_H20USR_PAM_I2C_FW_Loader") Then
        TheHdw.Protocol.Ports("I2C_Pins").ModuleFiles.Load "VBT_H20USR_PAM_I2C_FW_Loader"
    End If
    
    If Not TheHdw.Protocol.Ports("JTAG_Pins").ModuleFiles.Contains("VBT_Hilink_PAM_DUT_Initial") Then
        TheHdw.Protocol.Ports("JTAG_Pins").ModuleFiles.Load "VBT_Hilink_PAM_DUT_Initial"
    End If
    Exit Function
errHandler:
    TheExec.AddOutput "VBT_Hilink_PAM_DUT_Initial or VBT_H20USR_PAM_FW_Loader is not loaded!", vbRed

    HandleExecIPError "Load_PA_Module"

End Function

Public Function Load_PA_Masks() As Long
' This function is routine, do NOT modify this function, it will be called by Load_PA_Module()
' Return <Load_PA_Masks>:                 nothing

    On Error GoTo errHandler
    Dim Mask As Long
    Dim MASK_Name As String
    Dim Field_Name As String

    TheHdw.Protocol.Ports("JTAG_Pins").Enabled = True

    MASK_Name = "JTAG_SDR_MASK"

    If TheHdw.Protocol.Ports("JTAG_Pins").NWire.Masks.Contains(MASK_Name) Then Exit Function
    
    Field_Name = "DR_Sout"
    With TheHdw.Protocol.Ports("JTAG_Pins").NWire
        .Masks.Add MASK_Name
        .Frames("AHB_Read_SDS").Fields("Data").Masks(MASK_Name).Value = -1
    End With
    ' &H0008
    Mask = 2 ^ 3
    MASK_Name = "H" + Hex(Mask)
    TheHdw.Protocol.Ports("JTAG_Pins").NWire.Masks.Add MASK_Name
    TheHdw.Protocol.Ports("JTAG_Pins").NWire.Frames("AHB_Read_SDS").Fields("Data").Masks(MASK_Name).Value = Not Mask

    ' &H8000
    Mask = 2 ^ 15
    MASK_Name = "H" + Hex(Mask)
    TheHdw.Protocol.Ports("JTAG_Pins").NWire.Masks.Add MASK_Name
    TheHdw.Protocol.Ports("JTAG_Pins").NWire.Frames("AHB_Read_SDS").Fields("Data").Masks(MASK_Name).Value = Not Mask


    Exit Function
errHandler:
    Call TheExec.ErrorLogMessage("Test " & TL_C_ERRORSTR & ", Instance: " & TheExec.DataManager.InstanceName)
    If AbortTest Then Exit Function Else Resume Next

End Function

Public Function JTAG_SDR_LONG_DJTAG(ByVal Shift_in As String, ByVal Shift_out As String, ByVal bits As Long) As Long
' This function supports shifting long DR transactions
' This function is generated by CBB_Code_Gen_Tool_for_H16_H30, contact GSO Shanghai Team for more details
' private function only meant to be called by function <JTAG_SDR>
' ByVal <Shift_in> As String:       the shift in HEX data in string format
' ByVal <Shift_out> As String:      the expected shift out HEX data in string format
' ByVal <Bits> As Long:             Specify how many bytes to be shifted in this transaction
' Return <JTAG_SDR_LONG>:           -1 if success; Other number if error occurs
' 2014/09/30; ver.01
         
On Error GoTo Error_JTAG_SDR_LONG_DJTAG
                   
Dim tmpSin As String, tmpSout As String
tmpSin = Shift_in: tmpSout = Shift_out
                   
With TheHdw.Protocol.Ports("JTAG_Pins")
                   
    Dim FrameName As String
    FrameName = "DR_Header"
    While bits > 32
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            .Fields("TMS").Value = 0
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
'                Call .Execute(tlNWireExecutionType_Default)
                Call .Execute(tlNWireExecutionType_CaptureInCMEM)
            End If
                                                                                             
        End With
        .IdleWait
        bits = bits - 32
        FrameName = "DR_Body"
    Wend
    If bits < 32 Then
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            If bits = 31 Then
                .Fields("TMS").Value = &HC0000000
            Else
                .Fields("TMS").Value = 3 * 2 ^ (bits - 1)
            End If
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
'                Call .Execute(tlNWireExecutionType_Default)
                Call .Execute(tlNWireExecutionType_CaptureInCMEM)
            End If
        End With
        .IdleWait
    Else
        FrameName = "DR_Tail"
        With .NWire.Frames(FrameName)
            .Fields("DR_Sin").Value = HexExtractBytes(tmpSin, 4)
            If Shift_out = "" Then
                Call .Execute(tlNWireExecutionType_Default, "JTAG_SDR_MASK")
            Else
                .Fields("DR_Sout").Value = HexExtractBytes(tmpSout, 4)
'                Call .Execute(tlNWireExecutionType_Default)
                Call .Execute(tlNWireExecutionType_CaptureInCMEM)
            End If
        End With
        .IdleWait
    End If
                   
End With
                   
JTAG_SDR_LONG_DJTAG = -1
Exit Function
                   
Error_JTAG_SDR_LONG_DJTAG:
    JTAG_SDR_LONG_DJTAG = Err.Number
    '    Stop
    TheExec.Flow.TestLimit -1, 0, 0
    TheExec.Datalog.WriteComment "Error in 'JTAG_SDR_LONG_DJTAG' "
                   
End Function















































































