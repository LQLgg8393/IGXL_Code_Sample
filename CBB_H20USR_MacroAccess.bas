Attribute VB_Name = "CBB_H20USR_MacroAccess"
' This module is part of HiLink CBBs(H20USR)
' This module is generated by CBB_Code_Gen_Tool_for_H20USR, contact GSO Shanghai Team for more details
' Alpha 100  2015/09/30  initial release

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ '
'++                                                                 ++'
'++     This InitializePLDs_H20USR() is generated by auto-gen tool   ++'
'++     It should be checked mannually and confirmed by project     ++'
'++     owner when the CBB is applied to a new project              ++'
'++                                                                 ++'
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ '
Option Explicit
 
Public Function InitializePLDs_H20USR() As Long
''====================================================================================
'' Function: InitializePLDs_H20USR
'' Initialization of Macros Pins and Datalog
''====================================================================================
    On Error GoTo errHandler
 
    Dim i As Long
    Dim j As Long
    Dim k As Long
    
    Dim MacroNames() As String
    Dim SubMacroNames() As String
    Dim MacroTDI_IDs() As String
    Dim MacroTDO_IDs() As String
    
    Dim TXLaneCnts() As String
    Dim RXLaneCnts() As String
    Dim CRLaneCnts() As String
    
    Dim SubMacroTXLaneCnts() As String
    Dim SubMacroRXLaneCnts() As String
    
    Dim MacroTxP_Pins() As String
    Dim MacroRXP_Pins() As String
    Dim MacroTxN_Pins() As String
    Dim MacroRXN_Pins() As String
        
    Dim SubMacro_TxP_Pins() As String
    Dim SubMacro_RXP_Pins() As String
    Dim SubMacro_TxN_Pins() As String
    Dim SubMacro_RXN_Pins() As String
    
    Dim SubMacro0_TxP() As String
    Dim SubMacro0_RXP() As String
    Dim SubMacro0_TxN() As String
    Dim SubMacro0_RXN() As String
        
    Dim SubMacro1_TxP() As String
    Dim SubMacro1_RXP() As String
    Dim SubMacro1_TxN() As String
    Dim SubMacro1_RXN() As String
    
    Dim MacroTxP() As String
    Dim MacroTxN() As String
    Dim MacroRXP() As String
    Dim MacroRXN() As String
 
    Dim RXP_StrTemp As String
    Dim TxP_StrTemp As String
    Dim RXN_StrTemp As String
    Dim TxN_StrTemp As String
 
    Dim RF1_ExtLpbk_TxStrTemp As String
    Dim RF2_ExtLpbk_TxStrTemp As String
    Dim RF1_ExtLpbk_TxStr() As String
    Dim RF2_ExtLpbk_TxStr() As String
    Dim RF1_ExtLpbk_MacroTxP() As String
    Dim RF2_ExtLpbk_MacroTxP() As String
    Dim tmp_SDR_TDI_ID_All As Long

    MacroNames = Split("Macro_SDS", ",")
    SubMacroNames = Split("SubMacro0", ",")
    
    MacroTDI_IDs = Split("1", ",")
    MacroTDO_IDs = Split("1", ",")
    
    If MacroCnt_H20USR - 1 <> UBound(MacroNames) Then MsgBox ("Wrong number of MacroCount!"): Stop '
       
    TXLaneCnts = Split("1", ",")
    RXLaneCnts = Split("2", ",")
    CRLaneCnts = Split("1", ",")

    SubMacroTXLaneCnts = Split("1,", ",")
    SubMacroRXLaneCnts = Split("2,", ",")
    
    TxP_StrTemp = "USRUL0_P"
    TxN_StrTemp = "USRUL0_N"
    RXP_StrTemp = "USRDL0_P,USRDL1_P"
    RXN_StrTemp = "USRDL0_N,USRDL1_N"
        
    RF1_ExtLpbk_TxStrTemp = "USRUL0_P,"
    RF2_ExtLpbk_TxStrTemp = ",USRUL0_P"
    MacroTxP_Pins = Split(TxP_StrTemp, "//")
    MacroRXP_Pins = Split(RXP_StrTemp, "//")
    MacroTxN_Pins = Split(TxN_StrTemp, "//")
    MacroRXN_Pins = Split(RXN_StrTemp, "//")
        
    RF1_ExtLpbk_MacroTxP = Split(RF1_ExtLpbk_TxStrTemp, "//")
    RF2_ExtLpbk_MacroTxP = Split(RF2_ExtLpbk_TxStrTemp, "//")
    With TheDUT.H20USR
            .SIR_AHB_com = "AB"
        For i = 0 To MacroCnt_H20USR - 1
            With .Macro(i)
                .SubMacro(0).Selected = True
                .SubMacro(1).Selected = False
                .Name = MacroNames(i)
                .SDR_TDI_ID = MacroTDI_IDs(i)
                tmp_SDR_TDI_ID_All = tmp_SDR_TDI_ID_All Or val("&H" + MacroTDI_IDs(i) + "&")
                .SDR_TDO_ID = MacroTDO_IDs(i)
                
                
                .TX_LanCnt = CLng(TXLaneCnts(i))
                .RX_LanCnt = CLng(RXLaneCnts(i))
                .CR_LanCnt = CLng(CRLaneCnts(i))
                
                For k = 0 To SubMacroCnt_H20USR - 1
                    .SubMacro(k).Name = SubMacroNames(k)
                    .SubMacro(k).RX_LanCnt = SubMacroRXLaneCnts(k)
                    .SubMacro(k).TX_LanCnt = SubMacroTXLaneCnts(k)
                Next k
                
''                MacroTxP = Split(MacroTxP_Pins(i), ",")
''                MacroTxN = Split(MacroTxN_Pins(i), ",")
''                MacroRXP = Split(MacroRXP_Pins(i), ",")
''                MacroRXN = Split(MacroRXN_Pins(i), ",")
                
                SubMacro_TxP_Pins = Split(MacroTxP_Pins(i), "/")
                SubMacro_RXP_Pins = Split(MacroRXP_Pins(i), "/")
                SubMacro_TxN_Pins = Split(MacroTxN_Pins(i), "/")
                SubMacro_RXN_Pins = Split(MacroRXN_Pins(i), "/")
                   
                SubMacro0_TxP = Split(SubMacro_TxP_Pins(0), ",")
                SubMacro0_RXP = Split(SubMacro_RXP_Pins(0), ",")
                SubMacro0_TxN = Split(SubMacro_TxN_Pins(0), ",")
                SubMacro0_RXN = Split(SubMacro_RXN_Pins(0), ",")
                
                If SubMacroCnt_H20USR > 1 Then
                    SubMacro1_TxP = Split(SubMacro_TxP_Pins(1), ",")
                    SubMacro1_RXP = Split(SubMacro_RXP_Pins(1), ",")
                    SubMacro1_TxN = Split(SubMacro_TxN_Pins(1), ",")
                    SubMacro1_RXN = Split(SubMacro_RXN_Pins(1), ",")
                    
                    MacroTxP_Pins(i) = SubMacro_TxP_Pins(0) + "," + SubMacro_TxP_Pins(1)
                    MacroRXP_Pins(i) = SubMacro_RXP_Pins(0) + "," + SubMacro_RXP_Pins(1)
                    MacroTxN_Pins(i) = SubMacro_TxN_Pins(0) + "," + SubMacro_TxN_Pins(1)
                    MacroRXN_Pins(i) = SubMacro_RXN_Pins(0) + "," + SubMacro_RXN_Pins(1)
                Else
                    MacroTxP_Pins(i) = SubMacro_TxP_Pins(0)
                    MacroRXP_Pins(i) = SubMacro_RXP_Pins(0)
                    MacroTxN_Pins(i) = SubMacro_TxN_Pins(0)
                    MacroRXN_Pins(i) = SubMacro_RXN_Pins(0)
                End If
  
                MacroTxP = Split(MacroTxP_Pins(i), ",")
                MacroTxN = Split(MacroTxN_Pins(i), ",")
                MacroRXP = Split(MacroRXP_Pins(i), ",")
                MacroRXN = Split(MacroRXN_Pins(i), ",")
                
                RF1_ExtLpbk_TxStr = Split(RF1_ExtLpbk_MacroTxP(i), ",")
                RF2_ExtLpbk_TxStr = Split(RF2_ExtLpbk_MacroTxP(i), ",")
                For j = 0 To .RX_LanCnt - 1
                    .Lane(j).RxN = MacroRXN(j)
                    .Lane(j).RxP = MacroRXP(j)
                    .Lane(j).RF1_ExtLpbk_FromTxP = RF1_ExtLpbk_TxStr(j)
                    .Lane(j).RF2_ExtLpbk_FromTxP = RF2_ExtLpbk_TxStr(j)
                    If PLDContainsPin(H20USR_SerialPinMap_PLD, MacroRXN(j)) = False Then
                        H20USR_SerialPinMap_PLD.AddPin(MacroRXN(j)).Value = i * 16 + j
                    End If
                    If PLDContainsPin(H20USR_SerialPinMap_PLD, MacroRXP(j)) = False Then
                        H20USR_SerialPinMap_PLD.AddPin(MacroRXP(j)).Value = i * 16 + j
                    End If
                    If PLDContainsPin(H20USR_RXSerialPinMap_PLD, MacroRXN(j)) = False Then
                        H20USR_RXSerialPinMap_PLD.AddPin(MacroRXN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_RXSerialPinMap_PLD, MacroRXP(j)) = False Then
                        H20USR_RXSerialPinMap_PLD.AddPin(MacroRXP(j)).Value = i * 16 + j
                    End If
                    
                Next j
                
                For j = 0 To .SubMacro(0).RX_LanCnt - 1
                    If PLDContainsPin(H20USR_SubMacro0_RXSerialPinMap_PLD, SubMacro0_RXN(j)) = False Then
                        H20USR_SubMacro0_RXSerialPinMap_PLD.AddPin(SubMacro0_RXN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_SubMacro0_RXSerialPinMap_PLD, SubMacro0_RXP(j)) = False Then
                        H20USR_SubMacro0_RXSerialPinMap_PLD.AddPin(SubMacro0_RXP(j)).Value = i * 16 + j
                    End If
                Next j
                
                For j = 0 To .SubMacro(1).RX_LanCnt - 1
                    If PLDContainsPin(H20USR_SubMacro1_RXSerialPinMap_PLD, SubMacro1_RXN(j)) = False Then
                        H20USR_SubMacro1_RXSerialPinMap_PLD.AddPin(SubMacro1_RXN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_SubMacro1_RXSerialPinMap_PLD, SubMacro1_RXP(j)) = False Then
                        H20USR_SubMacro1_RXSerialPinMap_PLD.AddPin(SubMacro1_RXP(j)).Value = i * 16 + j
                    End If
                Next j
                
                For j = 0 To .TX_LanCnt - 1
                    .Lane(j).TxN = MacroTxN(j)
                    .Lane(j).TxP = MacroTxP(j)
                    
                    If PLDContainsPin(H20USR_SerialPinMap_PLD, MacroTxN(j)) = False Then
                        H20USR_SerialPinMap_PLD.AddPin(MacroTxN(j)).Value = i * 16 + j
                    End If
                    If PLDContainsPin(H20USR_SerialPinMap_PLD, MacroTxP(j)) = False Then
                        H20USR_SerialPinMap_PLD.AddPin(MacroTxP(j)).Value = i * 16 + j
                    End If
                    If PLDContainsPin(H20USR_TXSerialPinMap_PLD, MacroTxN(j)) = False Then
                        H20USR_TXSerialPinMap_PLD.AddPin(MacroTxN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_TXSerialPinMap_PLD, MacroTxP(j)) = False Then
                        H20USR_TXSerialPinMap_PLD.AddPin(MacroTxP(j)).Value = i * 16 + j
                    End If
                Next j
                
                For j = 0 To .SubMacro(0).TX_LanCnt - 1
                    If PLDContainsPin(H20USR_SubMacro0_TXSerialPinMap_PLD, SubMacro0_TxN(j)) = False Then
                        H20USR_SubMacro0_TXSerialPinMap_PLD.AddPin(SubMacro0_TxN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_SubMacro0_TXSerialPinMap_PLD, SubMacro0_TxP(j)) = False Then
                        H20USR_SubMacro0_TXSerialPinMap_PLD.AddPin(SubMacro0_TxP(j)).Value = i * 16 + j
                    End If
                Next j
                
                For j = 0 To .SubMacro(1).TX_LanCnt - 1
                    If PLDContainsPin(H20USR_SubMacro1_TXSerialPinMap_PLD, SubMacro1_TxN(j)) = False Then
                        H20USR_SubMacro1_TXSerialPinMap_PLD.AddPin(SubMacro1_TxN(j)).Value = i * 16 + j    ''Added for Lane Select 20180510
                    End If
                    If PLDContainsPin(H20USR_SubMacro1_TXSerialPinMap_PLD, SubMacro1_TxP(j)) = False Then
                        H20USR_SubMacro1_TXSerialPinMap_PLD.AddPin(SubMacro1_TxP(j)).Value = i * 16 + j
                    End If
                Next j
            End With
        Next i
    End With

    H20USR.Datalog.AddPins2PinListData

    H20USR.Datalog.ResetPLDs (-99)
    
    Exit Function
errHandler:
    Call TheExec.ErrorLogMessage("Test " & TL_C_ERRORSTR & ", Instance: " & TheExec.DataManager.InstanceName)
    If AbortTest Then Exit Function Else Resume Next
End Function





